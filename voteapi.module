<?php
// $Id$

/**
 * @Implement of hook_menu()
 */
function voteapi_menu() {
  $items = array();
  /**
   * 处理投票请求的地址
   * arg(1)：模块名称
   * arg(2)：投票类型
   *  类型不能重复，最好加上模块名称为前缀，避免和其它模块的命名冲突。若冲突，将导致投票、计数结果完全错误
   * 以上两个参数将决定调用哪些函数来完成请求，如：voteapi/user/vote，将执行以下操作：
   * 调用 user_voteapi_setting('vote')，读取投票基本设置
   * 调用  user_voteapi_access('vote')，验证投票权限，返回 true，则有权投票
   * 必须通过 get 传递以下值：
   * value：投票值，只能是整型。可以在 hook_voteapi_settting() 中设置允许的值
   * nid：节点 id，只能是正整数
   */
  $items['voteapi/%/%'] = array(
    'load_functions' => array(1 => '%', 2 => '%'),
    'access_callback' => true,
    'page_callback' => '_voteapi_exec',
    'page_arguments' => array(1, 2),
  );
  return $items;
}

/**
 * voteapi 记录每个节点的投票统计，tags 字段为类型标识，包括三种基本类型：
 * sum：节点总分（所有值相加）
 * count：节点总投票次数
 * avg：节点平均分，总分/总次
 * 基本类型默认启用，在配置中可设置禁用。如投票只有一个值，即 +1，只需要统计总人数即可
 * 扩展统计类型，即根据投票值统计：
 * 假如是五星投票，投票值即为：1、2、3、4、5，扩展统计类型将记录各值总人数，标识即为投票值
 * 扩展统计默认禁用，在配置中设置启用
 * 总值保留 2 位小数
 * 每次投票请求处理成功后，将返回以上统计，也可通过 voteapi_get_data() 获取
 */

/**
 * 处理投票
 * @param (string) $module
 *  模块名称
 * @param (string) $type
 *  投票类型
 * @param (array) $v
 *  直接调用此函数完成投票，必须传递 $v['value']、$v['nid]
 * @param (array) $error
 *  错误提示
 * @param (bool) $page
 *  来自于 url(voteapi/%/%) 的投票请求 
 * @return 失败返回 false，成功返回一个对象，包含当前节点得票统计
 */
function voteapi_exec($module, $type, array $v, &$error = NULL, $page = NULL) {
  $vote = new stdClass();
  
  if (isset($v['value']) && !empty($v['nid'])) {
    $vote->value = $v['value'];
    $vote->nid = $v['nid'];
  } else {
    $error->code = -1;
    $error->text = t('voteapi', 'value 和  nid 不存在');
    return false;
  }
  
  global $user, $conf;
 
  if (empty($conf['voteapi_tid']) || empty($conf['voteapi_tid'][$module]) || empty($conf['voteapi_tid'][$module][$type])) {
    $error->code = -2;
    $error->text = t('voteapi', '未定义的投票类型');
    return false; 
  }

  $vote->tid = $conf['voteapi_tid'][$module][$type]; // 投票类型对应的数据库 id
  $vote->module = $module;
  $vote->is_page = $page; // 是否为通过 voteapi/{module}/{type} 进行的投票
  $vote->type = $type;
  
  if (!is_numeric($vote->value) || !is_numeric($vote->nid)) {
    $error->code = -3;
    $error->text = t('voteapi', 'value 和 nid 只能是数字');
    return false;
  }
  
  // 调用类型配置函数
  $func_setting = $module . '_voteapi_setting';

  if (function_exists($func_setting)) {
    $setting = $func_setting($type, $vote);
  }
  
  if (!isset($setting)) {
    $error->code = -2;
    $error->text = t('voteapi', '未定义的投票类型');
    return false;
  }
  
  if ($page && $setting['not_page']) {
    $error->code = -13;
    $error->text = t('voteapi', '不允许通过页面接口投票');
    return false;
  }
  
  /**
   * 基本权限验证：只允许登录用户投票
   * 赋值类型 bool，如： array('is_login' => true)
   */
  if ($setting['is_login'] && !$user->uid) {
    $error->code = -11;
    $error->text = t('voteapi', '只有登录用户才能投票');
    return false;
  }
  
  /**
   * 基本权限验证：只允许特定用户组投票
   * 赋值类型 array，如： array('is_roles' => array(3, 5)
   * 验证当前用户所在用户组是否在允许范围
   */
  if ($setting['is_roles']) {
    $true = false;
    if ($user->roles) {
      foreach ($setting['is_roles'] as $rid) {
        if ($user->roles[$rid]) {
          $true = true;
          break;
        }
      }
    }
    if ($true == false) {
      $error->code = -12;
      $error->text = t('voteapi', '没有权限投票');
      return false;
    }
  }
  
  /**
   * 检查 $vote->value 是否被允许
   * 假如设置为：array(1, -1)，则表示只允许 1 和 -1
   */
  if ($setting['is_value'] && !in_array($vote->value, $setting['is_value'])) {
    $error->code = -5;
    $error->text = t('voteapi', '非法的投票参数');
    return false;
  }

  /**
   * 验证节点的合法性
   * 发起投票请求的模块应在 hook_voteapi_load_node() 中验证 nid 是否合法
   * 若合法，请为 $vote->node 赋值，类型不限，通常为节点对象
   * 若 $vote->node 为空，将阻止投票
   */ 
  $vote->node = NULL;

  module_invoke_all('voteapi_load_node', $vote);

  if (empty($vote->node)) {
    $error->code = -6;
    $error->text = t('voteapi', '非法的投票节点');
    return false;   
  }

  $vote->host = ip_address();
  
  // 新增投票
  if (empty($v['iid'])) {
    /**
     * 检查投票时间限制
     * 以小时为单位，若设置为 1，表示每小时可投一票，设置为 2，2 小时可投一票。0 为不限制
     */
    if (!empty($setting['is_time']) && is_numeric($setting['is_time'])) {

      $args = array($vote->tid);
      $query = 'SELECT timestamp FROM {voteapi_info} WHERE tid = ? AND';
      
      if ($user->uid) {
        // 登录用户以 uid 判断
        $query .= ' uid = ?';
        $args[] = $user->uid;
      } else {
        // @TODO 未登录用户以 ip 判断，暂不考虑 session
        $query .= ' host = ?';
        $args[] = $vote->host;
      }
      
      $query .= ' AND nid = ? ORDER BY timestamp';
      $args[] = $vote->nid;

      if ($vote->last_timestamp = db_query($query, $args, array('return' => 'column'))) {
        if ($vote->last_timestamp > ($_SERVER['REQUEST_TIME']-$setting['is_time']*3600)) {
          $error->code = -7;
          if ($setting['is_time'] < 73) {
            $error->text = t('voteapi', '每 !string 小时只能投票一次', array('!string' => $setting['is_time']));
          } else {
            $error->text = t('voteapi', '你已经投过票了');
          }
          return false;
        }
      }
    }

    $vote->timestamp = $_SERVER['REQUEST_TIME'];
    $vote->uid = $user->uid;
    
    if (!empty($v['ext_id'])) {
      $vote->ext_id = $v['ext_id'];
    }

    $args = NULL;
    $vote->in_update = false;
  } else {
    // 修改投票不验证时间限制
    $vote->iid = $v['iid'];
    $args = array('iid');
    $vote->in_update = true;
  }

  // 表示已通过默认验证，可以写入投票
  $vote->is_ok = true;

  /**
   * voteapi 模块只进行基础验证，若需要更细致的权限控制，请在 hook_voteapi_presave() 里自行验证
   * 可将 vote->is_ok 设置为 false，则阻止写入投票
   */
  module_invoke_all('voteapi_presave', $vote);

  if ($vote->is_ok === false) {
    $error->code = -12;
    $error->text = t('voteapi', '没有权限投票');
    return false;
  }
  
  if (db_write_record('voteapi_info', $vote, $args)) {
    $vote->statistics = array();
  
    // 若 later_statistics 为 true，则通过接口投票后，不调用统计，由模块自行处理
    if (empty($setting['later_statistics'])) {
      voteapi_update_statistics($vote, $setting);
    }

    $vote->code = $error->code = 0;

    // 成功，执行 hook_voteapi_save()
    module_invoke_all('voteapi_save', $vote);

    return $vote;
  }
  
  $error->code = -7;
  $error->text = t('voteapi', '写入数据失败');
  return false;
}

/**
 * 删除一条投票记录
 * @param int $iid
 *  voteapi_info.iid
 * @param bool $statistics
 *  是否更新统计
 * @return bool
 */
function voteapi_info_delete($iid, $statistics = true) {
  if ($statistics) {
    if ($o = db_query('SELECT nid, tid FROM {voteapi_info} WHERE iid = ?', array($iid), array('return' => 'one'))) {
      if (db_exec('DELETE FROM {voteapi_info} WHERE iid = ?', array($iid))) {
        // 更新投票统计
        if (!empty($statistics)) {
          voteapi_update_statistics($o);
        }
        return true;
      }
    }
  } else {
    return db_exec('DELETE FROM {voteapi_info} WHERE iid = ?', array($iid));
  }
  
}

/**
 * 清空投票明细，若删除整个节点或类型的明细，同时删除 voteapi 表中的统计
 * @param string $type
 *  自定义类型，必需
 * @param (int) $nid
 *  节点 id
 * @param int $ext_id
 *  扩展 id
 */
function voteapi_info_empty($tid, $nid = NULL, $ext_id = NULL, $statistics = 1) {
  if ($ext_id && $nid) {
    if (db_exec('DELETE FROM {voteapi_info} WHERE tid = ? AND nid = ? AND exit_id = ?',
    array($tid, $nid, $ext_id))) {
      if ($statistics) {
        voteapi_update_statistics($o);
      }
      return true;
    }
  } else if ($nid) {
    if (db_exec('DELETE FROM {voteapi_info} WHERE tid = ? AND nid = ?', array($tid, $nid))) {
      db_exec('DELETE FROM {voteapi} WHERE tid = ? AND nid = ?', array($tid, $nid));
      return true;
    }
  } else if (db_exec('DELETE FROM {voteapi_info} WHERE tid = ?', array($tid))) {
    db_exec('DELETE FROM {voteapi} WHERE tid = ? AND nid = ?', array($tid, $nid));
    return true;
  }
}

/**
 * @Implement of hook_voteapi_statistics() 
 * @param object $vote 
 *  一条投票记录
 * @param string $type 
 *  统计类型
 * @access public
 * @return void
 */
function voteapi_voteapi_statistics($vote, $type) {
  switch ($type) {
    case 'sum': case 'count': case 'avg':
      $vote->statistics[$type] = db_query('SELECT ' . $type . '(value) FROM {voteapi_info} WHERE tid = ? 
      AND nid = ? ORDER BY timestamp ASC', array($vote->tid, $vote->nid), array('return' => 'column'));
  }
}

/**
 * 节点投票统计
 * @param object $vote
 *  一条投票记录，必须包含 tid、nid
 * @param array $setting
 *  设置
 */
function voteapi_update_statistics($vote, array $setting = array()) {

  // 错误的请求
  if (empty($vote->tid) || empty($vote->nid)) return false;
  
  if (empty($setting)) $setting = voteapi_get_setting($vote->tid);

  /**
   * 统计单项值的总投票次数
   * 若未提供允许值(is_value)列表，不统计
   */
  if (!empty($setting['ext_statistics']) && !empty($setting['is_value'])) {
    if ($fetch = db_query('SELECT COUNT(value) AS c, value FROM {voteapi_info} WHERE tid = ? AND nid = ? 
    GROUP BY value ORDER timestamp ASC', array($vote->tid, $vote->nid))) {
      foreach ($fetch as $o) {
        $vote->statistics[$o->value] = voteapi_set_statistics($vote, $o->value, $o->c);
      }
    }
  }
 
  // 不需要总统计
  if (empty($setting['statistics'])) return false;

  // 若没有指定统计类型，则使用默认：sum count avg
  if (!is_array($setting['statistics'])) $setting['statistics'] = array('sum', 'avg', 'count');

  foreach ($setting['statistics'] as $key) {
    $vote->statistics[$key] = 0;
    // 在 hook_voteapi_statistics() 修改 $vote->statistics[$key] 的值
    module_invoke_all('voteapi_statistics', $vote, $key);
    // 更新统计
    voteapi_set_statistics($vote, $key, $vote->statistics[$key]);
  }
  
  return $vote->statistics;
}

/**
 * 根据 module 和 type 获取投票类型的 tid
 * @param string $module 
 * @param string $type 
 * @access public
 * @return void
 */
function voteapi_get_tid($module, $type) {
  global $conf;
  if (!empty($conf['voteapi_tid'][$module]) && !empty($conf['voteapi_tid'][$module][$type])) {
    return $conf['voteapi_tid'][$module][$type];
  }
}

/**
 * 通过 tid 或 module、type 获取投票类型配置参数
 * @param int|string $data
 *  若为 int，则使用 tid 获取，若为 string，则是模块名称
 * @param string $type
 *  若有值，则表示使用模块名称和类型获取
 * @access public
 * @return array
 */
function voteapi_get_setting($data, $type = NULL) {
  static $datas;

  if (!$type && $info = voteapi_get_info($data)) {
    $data = $info->module;
    $type = $info->type;
  }

  if (!isset($datas)) {
    $datas = _module_invoke_all('voteapi_setting');
  }

  return $datas[$data][$type];
}

/**
 * 根据 tid 获取投票类型的 module 和 type
 * @param int $tid
 * @param bool $info
 * @access public
 * @return void
 */
function voteapi_get_info($tid, $info) {
  global $conf;
  if (!empty($conf['voteapi_info'][$tid])) {
    return $conf['voteapi_info'][$tid];
  }
}

/**
 * 写入统计kijkiu
 * @param object $vote
 *  一条投票记录，必须有 $vote->tid、$vote->nid
 * @param (string) $tags
 *  统计类型
 * @param (int) $nid
 *  节点 id
 * @param (float) $value
 *  值，保留两位小数
 * @return float
 */
function voteapi_set_statistics($vote, $tags, $value) {
  static $data;

  if (!isset($data[$vote->tid]) && !isset($data[$vote->tid][$vote->nid])) {
    $data[$vote->tid] = array($vote->nid => array());
    if ($fetch = db_query('SELECT vid, tags FROM {voteapi} WHERE tid = ? AND nid = ?', 
    array($vote->tid, $vote->nid))) {
      foreach ($fetch as $o) {
        $data[$vote->tid][$vote->nid][$o->tags] = $o->vid;
      }
    }
  }
  
  if ($data[$vote->tid][$vote->nid][$tags]) {
    // 更新统计
    if (db_exec('UPDATE {voteapi} SET value = ?, timestamp = ? WHERE vid = ?',
    array($value, $_SERVER['REQUEST_TIME'], $data[$vote->tid][$vote->nid][$tags]))) {
      return $value;
    }
  } else if (db_exec('INSERT INTO {voteapi} (nid, tid, tags, value, timestamp) VALUES (?, ?, ?, ?, ?)',
  array($vote->nid, $vote->tid, $tags, $value, $_SERVER['REQUEST_TIME']))) {
    // 插入统计
    $data[$vote->tid][$vote->nid][$tags] = db_last_insert_id();
    return $value;
  }
}

/**
 * 获取节点投票统计
 * @param object $vote
 *  一条投票记录，必须有 $vote->tid、$vote->nid
 * @param (string) $tags
 *  统计类型
 * @param int $nid
 *  节点 id
 * @return float|array
 */
function voteapi_get_statistics($vote, $tags = NULL) {
  static $data;
  
  if (!isset($data[$vote->tid][$vote->nid])) {
    $data[$vote->tid][$vote->nid] = array();
    if ($fetch = db_query('SELECT * FROM {voteapi} WHERE tid = ? AND nid = ?', 
      array($vote->tid, $vote->nid))) {
      foreach ($fetch as $o) {
        $data[$o->tid][$o->nid][$o->tags] = $o;
      }
    }
  }
  
  if (is_null($tags)) {
    return $data[$vote->tid][$vote->nid];
  } else {
    return $data[$vote->tid][$vote->nid][$tags];
  }
}

/**
 * 通过 web 页面处理投票 
 * @param string $module 
 * @param string $type 
 * @access protected
 * @return void
 */
function _voteapi_exec($module, $type) {
  $error = NULL;

  if (!empty($_GET['data']) && in_array($_GET['data'], array('html', 'json'))) {
    header('Content-Type: text/html; charset=utf-8');
    $data = $_GET['data'];
  } else {
    header('Content-Type: text/plain; charset=utf-8');
    $data = 'json';
  }

  /**
   * 若指定返回 html 格式，默认成功则返回 0，失败则返回 $error->text，可在请求中自定义返回值
   */

  // 自定义成功返回信息，仅作用于 html 格式
  if (isset($_GET['success'])) {
    $success_text = $_GET['success'];
  }

  // 自定义失败返回信息，仅作用于 html 格式
  if (isset($_GET['error'])) {
    $error_text = $_GET['error'];
  }

  if (isset($_GET['value']) && !empty($_GET['nid'])) {
    $vote = voteapi_exec($module, $type, array('value' => $_GET['value'], 'nid' => $_GET['nid']), $error, 1);
  } else {
    $error = new stdClass;
    $error->code = 1;
    $error->text = 'ERROR!';
  }
  
  // 成功
  if ($error->code == 0) {
    if ($data == 'json') {
      $return = json_encode($data);
    } else {
      $return = isset($success_text) ? $success_text : 1; 
    }
  } else {
    if ($data == 'json') {
      $return = json_encode($error);
    } else {
      $return = isset($error_text) ? $error_text : $error->text; 
    } 
  }

  echo $return;

  exit;
}

/**
 * @Implement of hook_system_cache_clear()
 */
function voteapi_system_cache_clear($op, $value = NULL) {
  if ($op == 'submit' && !empty($value['value']['cache_hook'])) {

    $datas = _module_invoke_all('voteapi_setting');

    if ($fetch = db_query('SELECT * FROM {voteapi_type}')) {
      $info = $tid = array();
      foreach ($fetch as $o) {
        $tid[$o->module][$o->type] = $o->tid;
        $info[$o->tid] = $o;
        unset($datas[$o->module][$o->type]);
      }
      var_set('voteapi_tid', $tid, 0);
      var_set('voteapi_info', $info);
    }

    if (!empty($datas)) {
      $i = 0;
      foreach ($datas as $module => $list) {
        if (!is_array($list)) continue;
        foreach ($list as $type => $_v) {
          db_exec('INSERT INTO {voteapi_type} SET module = ?, type = ?', array($module, $type));
          $i = 1;
        }
      }
      if ($i) voteapi_system_cache_clear('submit', array('value' => array('cache_hook' => true)));
    }

  }
}


